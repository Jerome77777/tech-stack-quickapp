<template>
  <div>
    <div show="{{ config && config.enable }}">
      <div if="{{ visible && config.type === 'nativeAd' }}" class="native-ad">
        <div class="dialog">
          <text
            if="{{ styles['title'] }}"
            class="dialog-title"
            style="{{ styles['title'].style }}"
            >{{ styles['title'].text }}</text
          >
          <text
            if="{{ styles['subtitle'] }}"
            class="dialog-subtitle"
            style="{{ styles['subtitle'].style }}"
            >{{ styles['subtitle'].text }}</text
          >

          <div class="dialog-image" @click="handleAdClick">
            <image
              src="{{ adData.imgUrlList ? adData.imgUrlList[0] : adData.icon }}"
              class="dialog-ad-image"
              style="{{ styles.image && styles.image.style }}"
            ></image>

            <image
              if="{{ adData.logoUrl }}"
              src="{{ adData.logoUrl }}"
              class="dialog-ad-text"
            ></image>
            <text else class="dialog-ad-text">广告</text>
          </div>

          <div
            class="dialog-buttons"
            style="{{ styles.buttons && styles.buttons.style }}"
          >
            <text
              class="button button-cancel"
              @click="handleCancelClick"
              style="{{ styles['button-cancel'] && styles['button-cancel'].style }}"
              >{{
                styles['button-cancel'] ? styles['button-cancel'].text : '关闭'
              }}</text
            >

            <text
              class="button button-primary"
              @click="handleAdClick"
              style="{{ styles['button-primary'] && styles['button-primary'].style }}"
              >{{
                styles['button-primary']
                  ? styles['button-primary'].text
                  : '好的'
              }}</text
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import ad from '@service.ad';

export default {
  props: {
    config: {
      type: Object,
      default: {
        enable: false,
      },
    },

    styles: {
      type: Object,
    },
  },

  data: {
    adData: null,
    visible: false,
  },

  onInit() {
    this.$watch('adData', 'handleAdDataChange');
    this.$watch('config', 'handleConfigChange');
    if (this.config.adId) {
      this.handleConfigChange(this.config);
    }
  },

  onDestroy() {
    this.adDestroy();
  },

  handleConfigChange({ enable, adSlotName, type: adType, displayTimes }) {
    if (!enable) return;

    if (adSlotName === 'webviewAd' && adType !== 'rewardedVideoAd') {
      displayTimes.forEach((time) => {
        setTimeout(() => this.adRequest(), time * 1000);
      });
    } else {
      this.adRequest();
    }
  },

  handleAdDataChange(adData) {
    if (!adData) return;
    this.adExposure();
  },

  handleAdClick() {
    this.adClick();
    this.adClose();
  },

  handleCancelClick() {
    const { adSlotName, adId, type: adType } = this.config;
    this.adClose();
    analytics('adClose', { adSlotName, adId, adType });
  },

  adRequest() {
    let tempAd = null;

    const { adSlotName, adId, type: adType } = this.config;
    if (adType === 'nativeAd') {
      tempAd = ad.createNativeAd({ adUnitId: adId });
    } else if (adType === 'rewardedVideoAd') {
      tempAd = ad.createRewardedVideoAd({ adUnitId: adId });
    } else if (adType === 'interstitialAd') {
      tempAd = ad.createInterstitialAd({ adUnitId: adId });
    }

    analytics('adRequest', { adSlotName, adId, adType });

    if (tempAd && typeof tempAd !== 'object') {
      this.adClose();
      return;
    }

    tempAd.onError((error) => {
      // 已展示广告，第二次加载时无广告返回，不触发关闭
      if (!this.ad) {
        this.$emit('error');
        this.adClose();
      }

      analytics('adError', {
        adSlotName,
        adId,
        adType,
        adData: { error },
      });
    });

    tempAd.onLoad((res) => {
      if (adType === 'nativeAd' && res.adList && res.adList.length) {
        this.adDestroy();
        this.ad = tempAd;
        this.adData = res.adList[0];
      } else if (['interstitialAd', 'rewardedVideoAd'].includes(adType)) {
        this.ad = tempAd;
        this.adExposure();
      } else {
        this.adClose();
      }
    });

    if (tempAd.onClose) {
      tempAd.onClose(() => {
        this.adDestroy();
        this.adClose();
        analytics('adClose', { adSlotName, adId, adType });
      });
    }

    if (['nativeAd', 'rewardedVideoAd'].includes(adType)) {
      tempAd.load();
    }
  },

  adExposure() {
    const { adSlotName, adId, type: adType } = this.config;
    if (adType === 'nativeAd') {
      this.visible = true;
      this.$emit('show');
      this.ad.reportAdShow({ adId: this.adData.adId });
      analytics('adExposure', {
        adSlotName,
        adId,
        adType,
        adData: this.adData,
      });
    } else if (['interstitialAd', 'rewardedVideoAd'].includes(adType)) {
      this.ad.show();
      analytics('adExposure', { adSlotName, adId, adType });
    }
  },

  adClick() {
    const { adSlotName, adId, type: adType } = this.config;
    if (this.ad && this.ad.reportAdClick) {
      this.ad.reportAdClick({ adId: this.adData.adId });
      analytics('adClick', {
        adSlotName,
        adId,
        adType,
        adData: this.adData,
      });
    }
  },

  adClose() {
    this.visible = false;
    this.$emit('close');
  },

  adDestroy() {
    try {
      if (this.ad) this.ad.destroy();
      this.ad = null;
    } catch (error) {}
  },
};
</script>

<style>
.native-ad {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.7);
  animation-name: fadeIn;
  animation-duration: 300ms;
}

.dialog {
  position: relative;
  flex-direction: column;
  width: 100%;
  margin: 0 40px;
  background-color: #fff;
  border-radius: 20px;
}

.dialog-title {
  margin: 20px 0;
  text-align: center;
  font-size: 40px;
  color: #000;
}

.dialog-subtitle {
  margin-bottom: 20px;
  text-align: center;
  font-size: 34px;
  color: #000;
}

.dialog-image {
  position: relative;
  flex-direction: column;
}

.dialog-ad-image {
  width: 100%;
}

.dialog-ad-text {
  position: absolute;
  right: 0;
  bottom: 0;
  width: 60px;
  font-size: 20px;
  text-align: center;
  color: rgba(255, 255, 255, 0.4);
}

.dialog-buttons {
  flex-direction: column;
  align-items: center;
  margin-right: 40px;
  margin-bottom: 40px;
  margin-left: 40px;
}

.button {
  justify-content: center;
  align-items: center;
  text-align: center;
  border-radius: 44px;
}

.button-primary {
  margin-top: 10px;
  width: 100%;
  height: 88px;
  color: #fff;
  font-size: 28px;
  font-weight: bold;
  text-align: center;
  background-color: #4761f6;
}

.button-primary:active {
  opacity: 0.6;
}

.button-cancel {
  margin-top: 10px;
  color: #bbb;
  font-size: 24px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}
</style>
