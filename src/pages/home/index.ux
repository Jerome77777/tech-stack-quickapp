<template>
  <div class="wrapper">
    <Loading if="{{ isLoading }}" />
    <my-search-bar
      @blur="handleSearch"
      @enterKeyClick="handleSearch"
      @change="handleSearch"
    ></my-search-bar>
    <tabs
      onchange="onChangeTabIndex"
      index="{{currentIndex}}"
      if="{{isShowTabs}}"
    >
      <tab-bar class="tab-bar" mode="scrollable">
        <stack class="tab-item-warp" for="(index, item) in tabBarList">
          <text class="tab-item {{index===currentIndex ? 'active' : ''}}">{{
            item.name
          }}</text>
          <div if="index===currentIndex" class="line"></div>
        </stack>
      </tab-bar>
      <tab-content if="isShowTabContent">
        <div for="(index, $item) in tabBarList" tid="{{index}}">
          <TabItem
            pdata="{{$item}}"
            @update-callback="onUpdateCallback"
            if="index===currentIndex"
          />
        </div>
      </tab-content>
    </tabs>
  </div>
</template>

<import name="TitleBar" src="./../../components/TitleBar.ux"></import>
<import name="TabItem" src="./../../components/TabItem"></import>
<import name="Loading" src="./../../components/Loading"></import>
<import name="my-search-bar" src="apex-ui/components/search-bar/index"></import>

<script>
import { hotclassify, moreclassify } from '../../assets/data/mock'
import router from '@system.router'
import { cloneDeep } from 'loadsh'
import { private_agree_key } from '../../helper/constants'

export default {
  data: {
    showTips: false,
    currentIndex: 0,
    isLoading: false,
    page: 0,
    timer: null,
    timer2: null,
    pageSize: 10,
    searchText: '',
    selectedTab: async () => await $utils.getStorage(tab_index),
    tabBarList: [
      {
        name: '全部',
        data: []
      },
      {
        name: '前端',
        data: []
      },
      {
        name: '后端',
        data: []
      },
      {
        name: '大数据',
        data: []
      }
    ],
    isShowTabs: true,
    isShowTabContent: false
  },
  props: ['tabIndex', 'pageShow'],

  async onInit() {
    this.$watch('pageShow', 'watchPageshowChange')
  },

  async onChangeTabIndex(evt) {
    this.page = 0
    await this.getData(evt.index, false)
    this.currentIndex = evt.index
  },

  async watchPageshowChange() {
    const tip = await $utils.getStorage(private_agree_key)
    if (!tip) {
      this.showTips = true
    }
    this.$on('dispatchEvt', this.dispatchEvt)

    this.getData(null, true)
  },

  changeTabactive(e) {
    this.activeTab = e.index
  },
  handleClassifyClick(classify) {
    router.push({
      uri: 'pages/book-list',
      params: {
        classify
      }
    })
  },
  handleAdClick(e) {
    console.log('click', e)
  },
  handleAdClose() {
    console.log('close')
  },
  async getData(index, isRandom = false) {
    let _this = this
    if (!index) {
      $apis.article
        .getList({
          searchAll: 'true',
          articleShelf: '',
          searchType: '',
          page: _this.page,
          pageSize: _this.pageSize
        })
        .then(res => {
          const sources = cloneDeep(res)
          console.log(sources)
          const list = res.sort(function() {
            return 0.5 - Math.random()
          })
          _this.tabBarList[0].data = []
          _this.tabBarList[0].data = isRandom ? list : sources
          _this.isShowTabContent = true
        })
    } else {
      $apis.article
        .getListByType({
          articleShelf: '',
          searchType: _this.tabBarList[index].name,
          page: _this.page,
          pageSize: _this.pageSize
        })
        .then(res => {
          const sources = cloneDeep(res)
          console.log(sources + 2)
          const list = res.sort(function() {
            return 0.5 - Math.random()
          })
          _this.tabBarList[index].data = []
          _this.tabBarList[index].data = isRandom ? list : sources
          _this.isShowTabContent = true
          _this.tabBarList.splice(0, 0)
        })
    }
    _this.$broadcast('changeTab')
  },

  /* -----------------onCallBackEvent----------------- */
  onUpdateCallback() {
    this.isLoading = false
  },

  dispatchEvt() {
    this.page++
    if (this.currentIndex === 0) {
      $apis.article
        .getList({
          searchAll: 'true',
          articleShelf: '',
          searchType: '',
          page: this.page,
          pageSize: this.pageSize
        })
        .then(res => {
          this.tabBarList[0].data = this.tabBarList[0].data.concat(res)
          this.isShowTabContent = true
          if (!res || res.length === 0) {
            this.page--
          }
        })
    } else {
      $apis.article
        .getListByType({
          articleShelf: '',
          searchType: this.tabBarList[this.currentIndex].name,
          page: this.page,
          pageSize: this.pageSize
        })
        .then(res => {
          this.tabBarList[this.currentIndex].data = this.tabBarList[
            this.currentIndex
          ].data.concat(res)
          this.isShowTabContent = true
          this.tabBarList.splice(0, 0)
          if (!res || res.length === 0) {
            this.page--
          }
        })
    }
    console.log('this.tabBarList', this.tabBarList)
  },
  onWatchCurrentIndex(newValue, oldValue) {},

  handleSearch(e) {
    clearTimeout(this.timer)
    let _this = this
    this.timer = setTimeout(function() {
      _this.searchText =
        (e.detail && e.detail.event && e.detail.event.value) || ''
      _this.page = 0
      $apis.article
        .getListByName({
          articleShelf: '',
          searchType: _this.tabBarList[_this.currentIndex].name,
          searchName: _this.searchText,
          page: _this.page,
          pageSize: _this.pageSize
        })
        .then(res => {
          _this.tabBarList[_this.currentIndex].data = []
          _this.tabBarList[_this.currentIndex].data = _this.tabBarList[
            _this.currentIndex
          ].data.concat(res)
          _this.isShowTabContent = true
          _this.tabBarList.splice(0, 0)
          if (!res || res.length === 0) {
            _this.page--
          }
        })
    }, 500)
  },
  onHomeClick() {
    $utils.route2theUrl('/pages/main')
  }
}
</script>

<style lang="less">
@import '../../assets/styles/index.less';

.wrapper {
  flex: 1;
  flex-direction: column;
  background-color: @white-grey;
  .search {
    background-image: url('./../../assets/icons/search.png');
  }
  .share-btn {
    background-image: url('./../../assets/icons/share.png');
  }
  .home-btn {
    background-image: url('./../../assets/icons/home.png');
  }
  .tab-bar {
    height: @tab-bar-height;
    background-color: #ffffff;
    border-top-width: 1px;
    border-bottom-width: 1px;
    border-color: @border-grey;

    .tab-item-warp {
      flex: 1;
      width: 25%;
      flex-direction: column;
      align-items: center;
      justify-content: flex-end;
      color: @grey;

      text {
        width: 20 * @size-factor;
        height: @tab-bar-height;
        line-height: @tab-bar-height;
        font-size: 4.5 * @size-factor;
        color: #71777d;
        text-align: center;
      }

      .active {
        color: @brand;
        font-size: 5 * @size-factor;
      }
      .line {
        height: 4px;
        width: 50%;
        background-color: @brand;
      }
    }
  }
  .mask-shadow {
    /* Confused：(fixed) 必须加，否则 opacity 不能很好的工作? */
    position: fixed;
    height: 100%;
    width: 100%;
    background-color: @grey-black;
    opacity: 0.3;
  }
}
.empty-data {
  height: 100px;
  width: 100%;
  .flex-box-mixins(row, center, center);
  text {
    line-height: 100px;
    font-size: 30px;
    text-align: center;
  }
}
</style>
